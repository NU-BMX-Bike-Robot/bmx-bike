%% update_events.m
%
% Description:
%   function that computes the 4x1 vector of data from which events are
%   detected
%
% Inputs:
%   x: the 10x1 vector of states
%   F_active: the active forces as computed by robot_dynamics
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   events: a 4x1 vector in which each element is either a constraint
%   equation value or a constraint force value

function [events] = update_events(x,F_active,params)

events = zeros(length(params.sim.constraints.active),1);

[C_all] = constraints(x,params);  
C_all = -C_all;       % change the sign so that this, like the force, goes negative to indicate an event

%all constraints active
if sum(params.sim.constraints.active) == 0
    events = C_all;    
else
    i_force = 0;
    for ic=1:length(params.sim.constraints.active)
        if params.sim.constraints.active(ic) == 1    % if a unilateral constraint is active, then monitor force
            i_force = i_force + 1;
            events(ic) = F_active(i_force);
        else
            events(ic) = C_all(ic);   % if a constraint is not active, monitor the constraint equation
        end
    end

end


