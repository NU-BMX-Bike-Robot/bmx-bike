%% plot_robot.m
%
% Description:
%   Plots the robot in its current configuration.
%   
% Inputs:
%   q: robot configuration, q = [x_cart; theta_pend];
%   params: a struct with many elements, generated by calling init_params.m
%   varargin: optional name-value pair arguments:
%       'new_fig': (default: false), if true, plot appears on new figure
%
% Outputs:
%   none
%
% Notes:
%   1) This code is written verbosely in the hope that it is clear how to
%   extend it to visualizing other more complex robots.

function plot_robot(q,params,varargin)
%% Parse input arguments
% Note: a simple robot plotting function doesn't need this, but I want to
% write extensible code, so I'm using "varargin" which requires input
% parsing. See the reference below:
%
% https://people.umass.edu/whopper/posts/better-matlab-functions-with-the-inputparser-class/

% Step 1: instantiate an inputParser:
p = inputParser;

% Step 2: create the parsing schema:
%      2a: required inputs:
addRequired(p,'bike_config', ...
    @(q) isnumeric(q) && size(q,1)==5 && size(q,2)==1);
addRequired(p,'bike_params', ...
    @(params) ~isempty(params));
%      2b: optional inputs:
addParameter(p, 'new_fig', false); % if true, plot will be on a new figure

% Step 3: parse the inputs:
parse(p, q, params, varargin{:});

% Verification: display the results of parsing:
% disp(p.Results)


%% Compute the 4 corners of the bike's body, clockwise from top left corner
% First compute the cart's home position (q(1) = 0):
body.home.upp_left.x    = -0.5*params.model.geom.body.w;
body.home.upp_left.y    = 0.5*params.model.geom.body.h;

body.home.upp_right.x   = 0.5*params.model.geom.body.w;
body.home.upp_right.y   = 0.5*params.model.geom.body.h;

body.home.low_right.x   = 0.5*params.model.geom.body.w;
body.home.low_right.y   = -0.5*params.model.geom.body.h;

body.home.low_left.x    = -0.5*params.model.geom.body.w;
body.home.low_left.y    = -0.5*params.model.geom.body.h;

body.home.corners = horzcat([body.home.upp_left.x; body.home.upp_left.y; 1],...
                            [body.home.upp_right.x; body.home.upp_right.y; 1],...
                            [body.home.low_right.x; body.home.low_right.y; 1],...
                            [body.home.low_left.x;  body.home.low_left.y; 1]);

% Compute the 4 corners of the body after undergoing planar
% translation + rotation as described by T_body:

T_body = [cos(q(3)), -sin(q(3)), q(1);
          sin(q(3)),  cos(q(3)), q(2);
          0,          0,         1];
body.curr.corners = T_body*body.home.corners;

%% Compute the 4 corners of the legs
% The pendulum is a rectangle whose center is q(1) = x_cart. The pendulum
% can translate horizontally and can rotate, so we first compute a 
% homogeneous transformation matrix T_pend in SE(2):

T_body_leftleg = [cos(0), -sin(0), -params.model.geom.body.w/2;
                 sin(0),  cos(0), -params.model.geom.body.h/2;
                   0,          0,         1];
               
T_body_rightleg = [cos(0), -sin(0), params.model.geom.body.w/2;
                 sin(0),  cos(0), -params.model.geom.body.h/2;
                   0,          0,         1];



% We first compute the 4 corners of the pendulum when the robot is in the
% "home" configuration (q(1) = q(2) = 0):
leg.home.upp_left.x    = -0.5*params.model.geom.leg.w;
leg.home.upp_left.y    = 0.5*params.model.geom.leg.l;

leg.home.upp_right.x   = 0.5*params.model.geom.leg.w;
leg.home.upp_right.y   = 0.5*params.model.geom.leg.l;

leg.home.low_right.x   =  0.5*params.model.geom.leg.w;
leg.home.low_right.y   = -0.5*params.model.geom.leg.l;

leg.home.low_left.x    = -0.5*params.model.geom.leg.w;
leg.home.low_left.y    = -0.5*params.model.geom.leg.l;

leg.home.corners = horzcat([leg.home.upp_left.x; leg.home.upp_left.y;   1],...
                            [leg.home.upp_right.x; leg.home.upp_right.y; 1],...
                            [leg.home.low_right.x; leg.home.low_right.y; 1],...
                            [leg.home.low_left.x;  leg.home.low_left.y;  1]);
            

% Now compute the 4 corners of the legs after undergoing planar
% translation + rotation
leg_l.curr.corners = T_body*T_body_leftleg*leg.home.corners;
leg_r.curr.corners = T_body*T_body_rightleg*leg.home.corners;



%% Compute the location of the wheels
% The pendulum is a rectangle whose center is q(1) = x_cart. The pendulum
% can translate horizontally and can rotate, so we first compute a 
% homogeneous transformation matrix T_pend in SE(2):

T_leg_wheel = [cos(0), -sin(0),         0;
               sin(0),  cos(0), -params.model.geom.leg.l/2;
                0,          0,         1];
               

wheel.center = [0;0;1];
                            
            

% Now compute the 4 corners of the legs after undergoing planar
% translation + rotation
wheel_l.curr.center = T_body*T_body_leftleg*T_leg_wheel*wheel.center;
wheel_r.curr.center = T_body*T_body_rightleg*T_leg_wheel*wheel.center;

%% Evaluate forward kinematics at points of interest
% FK = fwd_kin(q,params);
% 
% % (x,y) location of cart CoM:
% cart.curr.com.x = FK(1,1);
% cart.curr.com.y = FK(2,1);
% 
% % (x,y) location of pendulum CoM:
% pend.curr.com.x = FK(1,2);
% pend.curr.com.y = FK(2,2);
% 
% % (x,y) location of pendulum tip:
% pend.curr.tip.x = FK(1,3);
% pend.curr.tip.y = FK(2,3);

%% Display the cart, pendulum, and the pendulum's CoM
if p.Results.new_fig
    figure;
end

fill(body.curr.corners(1,:),body.curr.corners(2,:),params.viz.colors.body);
hold on;
fill(leg_l.curr.corners(1,:),leg_l.curr.corners(2,:),params.viz.colors.leg);
fill(leg_r.curr.corners(1,:),leg_r.curr.corners(2,:),params.viz.colors.leg);
plot(wheel_l.curr.center(1), wheel_l.curr.center(2),'o','MarkerSize',20,...
    'MarkerFaceColor',params.viz.colors.wheels,...
    'MarkerEdgeColor',params.viz.colors.wheels);
plot(wheel_r.curr.center(1), wheel_r.curr.center(2),'o','MarkerSize',20,...
    'MarkerFaceColor',params.viz.colors.wheels,...
    'MarkerEdgeColor',params.viz.colors.wheels);
hold off;

axis(params.viz.axis_lims);
daspect([1 1 1]) % no distortion

xlabel('$x$');
ylabel('$y$');

end