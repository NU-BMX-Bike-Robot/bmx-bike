%% constraint_derivatives.m
%
% Description:
%   Wrapper function for autogen_constraint_derivatives.m
%   Computes the constraint jacobian and hessians for the jumping robot.
%
% Inputs:
%   x: the state vector, x = [q; q_dot];
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   A_all: a 3x3 jacobian of constraint equation derivatives.  If only a
%   subset of constraints are active, then only those rows of A_all will be
%   used to compute the A matrix for that situation.
%
%   H_c1, H_c2, H_c3:  the hessian matrices; one for each constraint.  Note
%   that H_c3 is the null matrix, but we keep it for clean, robust code.

function [A_all,Hessian] = constraint_derivatives(x,params)

theta_com = x(3);

r_bw = params.model.geom.wheel.r;
r_fw = params.model.geom.wheel.r;
bw_com_distance = params.model.geom.bw_com.l;
bw_com_init_angle = params.model.geom.bw_com.theta;
fw_com_distance = params.model.geom.fw_com.l;
fw_com_init_angle = params.model.geom.fw_com.theta;

[A_all,H_cbw_x,H_cbw_y,H_cfw_y, H_cfw_bw] = autogen_constraint_derivatives(bw_com_distance,bw_com_init_angle,fw_com_distance,fw_com_init_angle,r_bw,r_fw,theta_com);
Hessian = cat(3,H_cbw_x,H_cbw_y,H_cfw_y,H_cfw_bw);

end